<script src="/javascripts/jquery-1.11.3.min.js"></script>
<link rel='stylesheet' href='/stylesheets/style.css' />
<script src="/javascripts/jquery-1.11.3.min.js"></script>
<script src="/codemirror/lib/codemirror.js"></script>
<script src="/codemirror/mode/javascript/javascript.js"></script>

<link rel="stylesheet" href="/codemirror/lib/codemirror.css">
<link rel="stylesheet" href="/codemirror/theme/monokai.css">
<link rel="stylesheet" href="/codemirror/addon/hint/show-hint.css"/>
<link rel="stylesheet" href="/codemirror/addon/display/fullscreen.css"/>
<link rel="stylesheet" href="/bootstrap/css/bootstrap.css">


<script src="/javascripts/jquery.js"></script>
<script src="/bootstrap/js/bootstrap.js"></script>


<script src="/javascripts/beautify.js"></script>
<script src="/javascripts/index.js"></script>

<script type="text/javascript" src="/RTC-client.js"></script>

<div>
    <div class="row">
     <!--   <div class="col-md-8">
            <textarea id="code-screen"></textarea>
        </div>-->
        <div class="container col-md-8">
            <div class="alert alert-warning" id="msg_alert">
                <a href="#" class="close" data-dismiss="alert">
                    &times;
                </a>
                <strong>tips:</strong><span id="msg">可以使用<code>Ctrl+Alt+L</code>格式化代码;<code>F11</code>开启全屏。</span>
            </div>

            <textarea id="code-screen">{{content}}</textarea>

            <div class="mt20"></div>
            <button onclick="clearCode()" style="width: 200px;" class="btn btn-danger">清空编辑区</button>
            <button onclick="enlargeFont()" style="width: 200px;" class="btn btn-info">增大字体</button>
            <button onclick="ensmallFont()" style="width: 200px;" class="btn btn-info">减小字体</button>
            <div class="mt20"></div>


            <!-- Create a simple CodeMirror instance #begin-->

            <script src="/codemirror/lib/codemirror.js"></script>
            <script src="/codemirror/mode/javascript/javascript.js"></script>
            <script src="/codemirror/addon/selection/active-line.js"></script>
            <script src="/codemirror/addon/edit/matchbrackets.js"></script>
            <script src="/codemirror/addon/hint/show-hint.js"></script>
            <script src="/codemirror/addon/hint/javascript-hint.js"></script>
            <script src="/codemirror/addon/display/fullscreen.js"></script>
            <style>
                .CodeMirror {
                    font-family: "Consolas", "Arial", "微软雅黑";
                    font-size: 20px;
                    height: 600px;
                }
            </style>

            <script type="text/javascript" src="codemirror/addon/selection/active-line.js"></script>
            <script type="text/javascript" src="codemirror/addon/edit/matchbrackets.js"></script>
            <script type="text/javascript" src="codemirror/addon/display/fullscreen.js"></script>
            <script>

                var editor = CodeMirror.fromTextArea(document.getElementById("code-screen"), {
                    lineNumbers: true,
                    styleActiveLine: true,
                    matchBrackets: true,
                    theme: "monokai",
                    mode: "text/javascript",
                    indentWithTabs: true,
                    autofocus: true,
                    //matchBrackets: true,
                    lineWrapping: true,
                    completeSingle: false,
                    extraKeys: {
                        "Ctrl-Q": "autocomplete"
                    }, //
                });
                editor.setOption("extraKeys", {
                    // Tab4个空格
                    Tab: function (cm) {
                        var spaces = Array(cm.getOption("indentUnit") + 1).join(" ");
                        cm.replaceSelection(spaces);
                    },
                    // F11全屏
                    "F11": function (cm) {
                        cm.setOption("fullScreen", !cm.getOption("fullScreen", true));
                    },
                    // Esc退出全屏
                    "Esc": function (cm) {
                        if (cm.getOption("fullScreen")) cm.setOption("fullScreen", false);
                    },
                    "Ctrl-Alt-L": function (cm) {
                        decodeJsCode();
                    },
                    "Ctrl-F5": function (cm) {
                        getExpress();
                    }
                });

                /*用来实时对用户的输入进行提示*/
                /*editor.on("cursorActivity", function () {
                     //获取用户当前的编辑器中的编写的代码
                     var words = editor.getValue() + "";
                     words = words.replace(/[a-z]+[\-|\']+[a-z]+/ig, '').match(/([a-z]+)/ig);
                     //将获取到的用户的单词传入CodeMirror,并在javascript-hint中做匹配
                     CodeMirror.ukeys = words;
                     //调用显示提示
                     editor.showHint();
                 });*/

                var enlargeFont = function () {
                    //获取para的字体大小
                    var thisEle = $(".CodeMirror").css("font-size");

                    //parseFloat的第二个参数表示转化的进制，10就表示转为10进制
                    var textFontSize = parseFloat(thisEle, 10);

                    //javascript自带方法
                    var unit = thisEle.slice(-2); //获取单位
                    textFontSize += 1;

                    $(".CodeMirror").css("font-size", textFontSize + unit);
                    editor.setOption(
                            "cursorHeight", 1
                    );
                }

                var ensmallFont = function () {
                    //获取para的字体大小
                    var thisEle = $(".CodeMirror").css("font-size");

                    //parseFloat的第二个参数表示转化的进制，10就表示转为10进制
                    var textFontSize = parseFloat(thisEle, 10);
                    var unit = thisEle.slice(-2); //获取单位
                    textFontSize -= 1;

                    $(".CodeMirror").css("font-size", textFontSize + unit);
                    editor.setOption(
                            "cursorHeight", 1
                    );
                }

                var clearCode = function () {
                    editor.setValue("");
                }

            </script>
        </div>
        <div class="col-md-4" id="chatbox">
            <div class="panel panel-primary">
                <!-- VIDEO CALL -->
                <div id="video-container">
                    <video autoplay id="second-video"></video>
                <video autoplay id="my-video" muted="true"></video>
                <div id="step2">
                    <p>Your ID: <span id="my-id">...</span></p>
                    <div class="form-inline">
                        <input type="text" class="form-control" placeholder="Call User ID..." id="callto-id">
                        <a href="#" class="btn btn-sm btn-success" id="make-call">Call</a>
                    </div>
                </div>
                <div id="step3">
                    <p>Talk to <span id="second-id">...</span>
                        <a href="#" class="btn btn-sm btn-danger" id="end-call">End call</a>
                    </p>
                </div>
            </div>

                <!-- CHAT ROOM -->
                <div class="panel-heading">
                    CHAT ROOM
                    <span class="pull-right" id="chatbox-username">
                        {{#if user}}
                            {{user.name}}
                        {{/if}}
                    </span>
                </div>
                <div class="panel-body">
                    <ul class="media-list" style="heigh: 300px; overflow-y: scroll" id="chatbox-listMessages">

                    </ul>
                </div>
                <div class="panel-footer">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Enter message" id="userMessage"/>
                        <span class="input-group-btn">
              <button type="button" class="btn btn-primary" onclick="sendMessage()">SEND</button>
            </span>
                    </div>
                </div>
            </div>



        </div>
    </div>
</div>
<input type="hidden" value="{{roomId}}" id="roomId"/>

<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.25.0/codemirror.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.25.0/mode/javascript/javascript.min.js"></script>

<script src="/plugins/ot/ot.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="https://cdn.jsdelivr.net/npm/peerjs@0.3.20/dist/peer.min.js"></script>

<script>
    var EditorClient = ot.EditorClient;
    var SocketIOAdapter = ot.SocketIOAdapter;
    var CodeMirrorAdapter = ot.CodeMirrorAdapter;

    var socket = io.connect('http://localhost:3000');
  /*  var editor = CodeMirror.fromTextArea(document.getElementById("code-screen"), {
        lineNumbers: true,
        theme: "monokai",
        matchBrackets: true,
        mode: "text/javascript",
        indentUnit:4,
        indentWithTabs: true,
        smartIndent: true
    });*/

    var code = $('#code-screen').val();
    var cmClient;
    function init(str, revision, clients, serverAdapter) {
        if (!code) {
            editor.setValue(str);
        }

        cmClient = window.cmClient = new EditorClient(
                revision, clients, serverAdapter, new CodeMirrorAdapter(editor)
        );
    };

    socket.on('doc', function(obj) {
        init(obj.str, obj.revision, obj.clients, new SocketIOAdapter(socket));
    });

    var username = $("#chatbox-username").val();
    if(username === "") {
        var userId = Math.floor(Math.random() * 9999).toString();
        username = "User" + userId;
        $("#chatbox-username").text(username);
    };

    var roomId = $('#roomId').val();
    socket.emit('joinRoom', {room: roomId, username: username});

    var userMessage = function(name, text) {
        return ('<li class="media"> <div class="media-body"> <div class="media">' +
                '<div class="media-body"' +
                '<b>' + name + '</b> : ' + text +
                '<hr/> </div></div></div></li>'
        );
    };

    var sendMessage = function() {
        var userMessage = $('#userMessage').val();
        socket.emit('chatMessage', {message: userMessage, username: username});
        $('#userMessage').val("");
    };

    socket.on('chatMessage', function(data) {
        $('#chatbox-listMessages').append(userMessage(data.username, data.message));
    });

    var msgs = document.getElementById("msgs");
    var rtc = RTC();
    //接收到文字信息
    rtc.on('data_channel_message', function(channel, socketId, message){
        var p = document.createElement("p");
        p.innerText = socketId + ": " + message;
        msgs.appendChild(p);
    });
    //连接WebSocket服务器
    rtc.connect("ws:" + window.location.href.substring(window.location.protocol.length).split('#')[0], window.location.hash.slice(1));

    //服务打开方式：peerjs --port 9000 --key peerjs
    // PeerJS
    // Compatibility shim
    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
    // PeerJS object
    var peer = new Peer(username + roomId, {key: 't9tfmg8kq39s5rk9'});

    peer.on('open', function(){
        $('#my-id').text(peer.id);
    });

    // Receiving a call
    peer.on('call', function(call){
        // Answer the call automatically (instead of prompting user) for demo purposes
        call.answer(window.localStream);
        step3(call);
    });

    peer.on('error', function(err){
        alert(err.message);
        // Return to step 2 if error occurs
        step2();
    });

    // Click handlers setup
    $(function(){
        $('#make-call').click(function(){
            // Initiate a call!
            var call = peer.call($('#callto-id').val(), window.localStream);
            step3(call);
        });
        $('#end-call').click(function(){
            window.existingCall.close();
            step2();
        });
        step1();
    });
    function step1 () {
        // Get audio/video stream
        navigator.getUserMedia({audio: true, video: true}, function(stream){
            // Set your video displays
           // $('#my-video').prop('src', URL.createObjectURL(stream));
            document.getElementById('my-video').srcObject=stream;
            window.localStream = stream;
            step2();
        }, function(){ $('#step1-error').show(); });
    }

    function step2 () {
        $('#step1, #step3').hide();
        $('#step2').show();
    }

    function step3 (call) {
        // Hang up on an existing call if present
        if (window.existingCall) {
            window.existingCall.close();
        }
        // Wait for stream on the call, then set peer video display
        call.on('stream', function(stream){
            //$('#second-video').prop('src', URL.createObjectURL(stream));
            document.getElementById('second-video').srcObject=stream;
        });
        // UI stuff
        window.existingCall = call;
        $('#second-id').text(call.peer);
        call.on('close', step2);
        $('#step1, #step2').hide();
        $('#step3').show();
    }

</script>
